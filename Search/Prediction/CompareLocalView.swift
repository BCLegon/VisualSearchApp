//
//  CompareLocalView.swift
//  Search
//
//  Created by Beno√Æt on 22/11/23.
//

import SwiftUI

struct CompareLocalView: View {
    @State var cacheState: CacheState = .initial
    @State var selectedImage: String = ""
    @State var imagedSelected: Bool = false
    @State var sortedImageNames: [String] = []
    
    enum CacheState {
        case initial
        case empty
        case filled
        case computing
    }

//    let photos = [
//        "cat",
//        "cat2",
//        "cat3",
//        "coffee",
//        "home",
//        "night"
//    ]
    
    let photos = ["100000", "100100", "100200", "100300", "100400", "100500", "100600", "100700", "100800", "100900", "101000", "101100", "101200", "101300", "101400", "101500", "101600", "101700", "101800", "101900", "102000", "102100", "102200", "102300", "102400", "102500", "102600", "102700", "102800", "102900", "103000", "103100", "103200", "103300", "103400", "103500", "103600", "103700", "103800", "103900", "104000", "104100", "104200", "104300", "104400", "104500", "104600", "104700", "104800", "104900", "105000", "105100", "105200", "105300", "105400", "105500", "105600", "105700", "105800", "105900", "106000", "106100", "106200", "106300", "106400", "106500", "106600", "106700", "106800", "106900", "107000", "107100", "107200", "107300", "107400", "107500", "107600", "107700", "107800", "107900", "108000", "108100", "108200", "108300", "108400", "108500", "108600", "108700", "108800", "108900", "109000", "109100", "109200", "109300", "109400", "109500", "109600", "109700", "109800", "109900", "110000", "110100", "110200", "110300", "110400", "110500", "110600", "110700", "110800", "110900", "111000", "111100", "111200", "111300", "111400", "111500", "111600", "111700", "111800", "111900", "112000", "112100", "112200", "112300", "112400", "112500", "112600", "112700", "112800", "112900", "113000", "113100", "113200", "113300", "113400", "113500", "113600", "113700", "113800", "113900", "114000", "114100", "114200", "114300", "114400", "114500", "114600", "114700", "114800", "114900", "115000", "115100", "115200", "115300", "115400", "115500", "115600", "115700", "115800", "115900", "116000", "116100", "116200", "116300", "116400", "116500", "116600", "116700", "116800", "116900", "117000", "117100", "117200", "117300", "117400", "117500", "117600", "117700", "117800", "117900", "118000", "118100", "118200", "118300", "118400", "118500", "118600", "118700", "118800", "118900", "119000", "119100", "119200", "119300", "119400", "119500", "119600", "119700", "119800", "119900", "120000", "120100", "120200", "120300", "120400", "120500", "120600", "120700", "120800", "120900", "121000", "121100", "121200", "121300", "121400", "121500", "121600", "121700", "121800", "121900", "122000", "122100", "122200", "122300", "122400", "122500", "122600", "122700", "122800", "122900", "123000", "123100", "123200", "123300", "123400", "123500", "123600", "123700", "123800", "123900", "124000", "124100", "124200", "124300", "124400", "124500", "124600", "124700", "124800", "124900", "125000", "125100", "125200", "125300", "125400", "125500", "125600", "125700", "125800", "125900", "126000", "126100", "126200", "126300", "126400", "126500", "126600", "126700", "126800", "126900", "127000", "127100", "127200", "127300", "127400", "127500", "127600", "127700", "127800", "127900", "128000", "128100", "128200", "128300", "128400", "128500", "128600", "128700", "128800", "128900", "129000", "129100", "129200", "129300", "129400", "129500", "129600", "129700", "129800", "129900", "130000", "130100", "130200", "130300", "130400", "130500", "130600", "130700", "130800", "130900", "131000", "131100", "131200", "131300", "131400", "131500", "131600", "131700", "131800", "131900", "132000", "132100", "132200", "132300", "132400", "132500", "132600", "132700", "132800", "132900", "133000", "133100", "133200", "133300", "133400", "133500", "133600", "133700", "133800", "133900", "134000", "134100", "134200", "134300", "134400", "134500", "134600", "134700", "134800", "134900", "135000", "135100", "135200", "135300", "135400", "135500", "135600", "135700", "135800", "135900", "136000", "136100", "136200", "136300", "136400", "136500", "136600", "136700", "136800", "136900", "137000", "137100", "137200", "137300", "137400", "137500", "137600", "137700", "137800", "137900", "138000", "138100", "138200", "138300", "138400", "138500", "138600", "138700", "138800", "138900", "139000", "139100", "139200", "139300", "139400", "139500", "139600", "139700", "139800", "139900", "140000", "140100", "140200", "140300", "140400", "140500", "140600", "140700", "140800", "140900", "141000", "141100", "141200", "141300", "141400", "141500", "141600", "141700", "141800", "141900", "142000", "142100", "142200", "142300", "142400", "142500", "142600", "142700", "142800", "142900", "143000", "143100", "143200", "143300", "143400", "143500", "143600", "143700", "143800", "143900", "144000", "144100", "144200", "144300", "144400", "144500", "144600", "144700", "144800", "144900", "145000", "145100", "145200", "145300", "145400", "145500", "145600", "145700", "145800", "145900", "146000", "146100", "146200", "146300", "146400", "146500", "146600", "146700", "146800", "146900", "147000", "147100", "147200", "147300", "147400", "147500", "147600", "147700", "147800", "147900", "148000", "148100", "148200", "148300", "148400", "148500", "148600", "148700", "148800", "148900", "149000", "149100", "149200", "149300", "149400", "149500", "149600", "149700", "149800", "149900", "100001", "100002", "100101", "100201", "100301", "100302", "100401", "100501", "100502", "100503", "100601", "100701", "100801", "100901", "100902", "101001", "101101", "101201", "101301", "101401", "101402", "101403", "101404", "101501", "101502", "101503", "101504", "101601", "101701", "101702", "101801", "101901", "102001", "102101", "102201", "102202", "102301", "102302", "102303", "102401", "102402", "102501", "102601", "102701", "102801", "102802", "102901", "103001", "103002", "103101", "103102", "103201", "103202", "103203", "103204", "103301", "103302", "103303", "103304", "103401", "103501", "103502", "103503", "103601", "103701", "103702", "103801", "103901", "103902", "104001", "104002", "104003", "104004", "104005", "104006", "104101", "104201", "104202", "104203", "104301", "104401", "104402", "104501", "104502", "104601", "104701", "104801", "104802", "104901", "104902", "105001", "105002", "105101", "105102", "105103", "105104", "105201", "105301", "105401", "105501", "105601", "105701", "105801", "105802", "105901", "106001", "106002", "106101", "106201", "106202", "106301", "106401", "106402", "106403", "106501", "106601", "106602", "106603", "106604", "106605", "106606", "106701", "106702", "106703", "106704", "106801", "106901", "106902", "106903", "107001", "107101", "107201", "107202", "107203", "107301", "107401", "107501", "107601", "107701", "107702", "107801", "107901", "107902", "108001", "108101", "108102", "108103", "108104", "108105", "108106", "108201", "108202", "108203", "108301", "108401", "108501", "108601", "108701", "108801", "108802", "108901", "108902", "109001", "109101", "109201", "109301", "109401", "109402", "109501", "109601", "109701", "109801", "109802", "109901", "110001", "110101", "110201", "110301", "110302", "110401", "110501", "110601", "110701", "110702", "110801", "110802", "110901", "111001", "111002", "111101", "111201", "111301", "111401", "111501", "111601", "111701", "111702", "111703", "111801", "111901", "112001", "112002", "112003", "112101", "112201", "112301", "112302", "112401", "112402", "112403", "112404", "112405", "112406", "112407", "112408", "112501", "112601", "112602", "112701", "112801", "112901", "112902", "113001", "113101", "113201", "113301", "113401", "113402", "113403", "113404", "113501", "113502", "113601", "113701", "113801", "113901", "114001", "114002", "114101", "114201", "114301", "114401", "114402", "114501", "114502", "114503", "114504", "114601", "114701", "114702", "114703", "114801", "114901", "114902", "114903", "115001", "115101", "115201", "115301", "115401", "115501", "115601", "115602", "115701", "115702", "115801", "115901", "115902", "116001", "116002", "116101", "116201", "116301", "116401", "116402", "116501", "116601", "116701", "116702", "116703", "116801", "116802", "116803", "116901", "117001", "117101", "117102", "117201", "117301", "117302", "117401", "117402", "117403", "117501", "117601", "117701", "117801", "117802", "117901", "118001", "118002", "118003", "118101", "118201", "118202", "118301", "118302", "118303", "118401", "118402", "118501", "118601", "118701", "118801", "118802", "118803", "118901", "119001", "119101", "119201", "119202", "119203", "119301", "119401", "119501", "119601", "119602", "119603", "119604", "119605", "119701", "119702", "119703", "119704", "119801", "119901", "120001", "120101", "120201", "120301", "120401", "120501", "120601", "120701", "120702", "120703", "120801", "120901", "121001", "121101", "121201", "121301", "121401", "121402", "121403", "121404", "121501", "121601", "121701", "121801", "121901", "122001", "122002", "122101", "122102", "122201", "122202", "122203", "122301", "122302", "122401", "122402", "122501", "122502", "122503", "122504", "122601", "122602", "122701", "122702", "122703", "122704", "122705", "122706", "122707", "122708", "122709", "122801", "122901", "123001", "123002", "123003", "123101", "123201", "123202", "123203", "123204", "123205", "123301", "123401", "123402", "123403", "123404", "123501", "123601", "123602", "123701", "123801", "123901", "124001", "124002", "124003", "124101", "124201", "124202", "124301", "124302", "124401", "124402", "124501", "124601", "124701", "124801", "124802", "124901", "125001", "125101", "125102", "125201", "125202", "125203", "125301", "125401", "125501", "125601", "125701", "125702", "125703", "125801", "125802", "125901", "126001", "126002", "126101", "126102", "126201", "126202", "126301", "126401", "126402", "126501", "126502", "126601", "126701", "126702", "126703", "126704", "126705", "126801", "126802", "126803", "126804", "126805", "126806", "126807", "126808", "126901", "126902", "127001", "127101", "127201", "127202", "127301", "127401", "127402", "127403", "127501", "127502", "127503", "127601", "127602", "127701", "127801", "127802", "127901", "128001", "128002", "128101", "128201", "128301", "128401", "128501", "128502", "128601", "128701", "128801", "128901", "129001", "129002", "129003", "129101", "129201", "129202", "129301", "129401", "129501", "129601", "129602", "129701", "129801", "129802", "129901", "130001", "130101", "130102", "130201", "130301", "130302", "130303", "130401", "130501", "130601", "130701", "130801", "130802", "130901", "131001", "131101", "131102", "131201", "131301", "131401", "131402", "131501", "131502", "131503", "131601", "131602", "131603", "131701", "131801", "131802", "131803", "131804", "131805", "131901", "132001", "132101", "132102", "132201", "132301", "132302", "132303", "132401", "132402", "132501", "132502", "132503", "132504", "132505", "132506", "132507", "132508", "132509", "132510", "132511", "132601", "132701", "132801", "132901", "132902", "133001", "133002", "133003", "133101", "133201", "133202", "133301", "133401", "133501", "133601", "133602", "133701", "133702", "133703", "133801", "133802", "133901", "134001", "134002", "134003", "134101", "134201", "134301", "134401", "134402", "134403", "134501", "134502", "134503", "134504", "134601", "134602", "134603", "134604", "134605", "134701", "134702", "134703", "134801", "134802", "134803", "134804", "134901", "135001", "135002", "135003", "135101", "135102", "135103", "135104", "135201", "135301", "135302", "135401", "135402", "135501", "135502", "135503", "135601", "135701", "135702", "135703", "135801", "135802", "135901", "135902", "136001", "136002", "136003", "136004", "136005", "136006", "136007", "136008", "136009", "136010", "136101", "136102", "136103", "136201", "136202", "136203", "136301", "136401", "136402", "136403", "136501", "136502", "136503", "136504", "136505", "136601", "136701", "136702", "136703", "136704", "136705", "136706", "136707", "136801", "136802", "136803", "136804", "136805", "136901", "136902", "136903", "137001", "137002", "137003", "137004", "137005", "137006", "137007", "137101", "137102", "137103", "137201", "137301", "137302", "137401", "137501", "137502", "137503", "137504", "137601", "137602", "137603", "137701", "137702", "137703", "137704", "137705", "137801", "137802", "137901", "138001", "138002", "138003", "138004", "138005", "138006", "138007", "138008", "138009", "138010", "138011", "138012", "138101", "138102", "138103", "138104", "138105", "138201", "138202", "138203", "138301", "138302", "138303", "138304", "138305", "138306", "138307", "138308", "138309", "138401", "138501", "138502", "138503", "138504", "138505", "138506", "138507", "138601", "138602", "138603", "138604", "138605", "138701", "138702", "138703", "138704", "138705", "138706", "138707", "138708", "138801", "138802", "138803", "138901", "138902", "138903", "138904", "138905", "139001", "139002", "139003", "139004", "139005", "139101", "139102", "139103", "139104", "139105", "139201", "139202", "139203", "139204", "139205", "139301", "139302", "139303", "139401", "139402", "139403", "139404", "139501", "139502", "139503", "139504", "139505", "139506", "139601", "139602", "139603", "139701", "139801", "139901", "140001", "140101", "140201", "140301", "140401", "140501", "140502", "140503", "140601", "140701", "140801", "140802", "140803", "140901", "140902", "141001", "141101", "141201", "141202", "141301", "141302", "141303", "141304", "141401", "141501", "141601", "141701", "141702", "141703", "141704", "141801", "141802", "141803", "141901", "142001", "142002", "142003", "142004", "142101", "142201", "142301", "142302", "142401", "142501", "142502", "142601", "142701", "142801", "142901", "143001", "143101", "143201", "143301", "143401", "143501", "143601", "143701", "143702", "143801", "143802", "143803", "143901", "143902", "143903", "143904", "144001", "144101", "144102", "144103", "144104", "144201", "144301", "144302", "144401", "144402", "144501", "144601", "144701", "144702", "144703", "144704", "144801", "144802", "144803", "144804", "144901", "144902", "144903", "145001", "145002", "145003", "145101", "145102", "145201", "145202", "145203", "145301", "145401", "145402", "145501", "145502", "145601", "145701", "145801", "145802", "145803", "145901", "145902", "146001", "146002", "146003", "146101", "146102", "146201", "146202", "146203", "146204", "146205", "146206", "146207", "146301", "146302", "146303", "146401", "146402", "146403", "146404", "146405", "146501", "146502", "146601", "146602", "146701", "146801", "146901", "147001", "147101", "147102", "147103", "147201", "147202", "147301", "147302", "147303", "147304", "147401", "147402", "147501", "147502", "147601", "147602", "147603", "147701", "147702", "147801", "147802", "147901", "148001", "148002", "148003", "148004", "148101", "148201", "148202", "148203", "148301", "148401", "148501", "148601", "148602", "148603", "148701", "148801", "148901", "148902", "149001", "149002", "149101", "149102", "149201", "149301", "149302", "149401", "149501", "149601", "149602", "149603", "149604", "149701", "149801", "149901", "149902"]
    
    let imagesPerRow = 4
    var imageSize: Double {
        (UIScreen.main.bounds.width) / Double(imagesPerRow)
    }
    
    static func getSimulatedDate(imageName: String) -> String {
        let month = Int(imageName.prefix(2))! - 10 + 4
        let day_and_hour = Int(imageName.dropFirst(2).prefix(2))!
        let day = day_and_hour % 28
        let hour = day_and_hour / 28 + 15
        let minutes = Int(imageName.dropFirst(4))!
        print(month, day, hour, minutes)
        if let dateString = formatDateTime(month: month, day: day, hour: hour, minutes: minutes) {
            return dateString
        } else {
            return ""
        }
    }
    
    static func formatDateTime(month: Int, day: Int, hour: Int, minutes: Int) -> String? {
        let calendar = Calendar.current
        var dateComponents = DateComponents()

        dateComponents.month = month
        dateComponents.day = day
        dateComponents.hour = hour
        dateComponents.minute = minutes

        // Get the current year (you may adjust this based on your specific use case)
        let currentYear = calendar.component(.year, from: Date())
        dateComponents.year = currentYear

        // Create a date object using the provided components
        if let date = calendar.date(from: dateComponents) {
            // Create a date formatter
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "MMMM d, yyyy 'at' HH'h'mm"

            // Format the date to a string
            return dateFormatter.string(from: date)
        }

        return nil
    }
    
    func selectImage(imageName: String) {
        selectedImage = imageName
        imagedSelected = true
    }
    
    func testSelectionFor(imageName: String) -> Bool {
        return imageName == selectedImage && imagedSelected
    }
    
    func compareFeaturePrintFor(imageName: String) {
        FeaturePrintData.retrieveFeaturePrintAppAsset(identifier: imageName) { anchorFeaturePrint in
            guard let anchorFeaturePrint = anchorFeaturePrint else {
                print("Failed to retrieve feature print for anchor")
                return
            }
            let featurePrints = FeaturePrintData.searchSimilarItems(anchorFeaturePrint: anchorFeaturePrint, distanceThreshold: 0.5)
            self.sortedImageNames = featurePrints.map {
                $0.identifier
            }
            print(sortedImageNames)
        }
    }
    
    func resetCache() {
        for featurePrint in FeaturePrintData.getAllItems() {
            print("Deleting \(featurePrint.identifier)...")
            FeaturePrintData.deleteFeaturePrintByIdentifier(featurePrint.identifier)
        }
    }
    
    func fillCache() {
        for (index, imageName) in photos.enumerated() {
            print("App asset \(index + 1): \(imageName)")
            FeaturePrintData.retrieveFeaturePrintAppAsset(identifier: imageName) { _ in
                
            }
        }
    }
    
    
    var body: some View {
        NavigationStack{
            VStack {
                ScrollView {
                    LazyVGrid(
                        columns: Array(repeating: GridItem(spacing: 0), count: imagesPerRow),
                        spacing: 0
                    ) {
                        ForEach(photos, id: \.self) { photo in
                            Button(action: {
                                selectImage(imageName: photo)
                                compareFeaturePrintFor(imageName: photo)
                            }, label: {
                                Image(photo)
                                    .resizable()
                                    .aspectRatio(contentMode: .fill)
                                    .frame(
                                        width: imageSize,
                                        height: imageSize
                                    )
                                    .clipped()
                                    .border(Color.accentColor, width: testSelectionFor(imageName: photo) ? 5 : 0)
//                                    .animation(.default)

                            })
                            .accessibilityLabel("Photo taken on \(CompareLocalView.getSimulatedDate(imageName: photo))")
                        }
                    }
                    .padding(0)
                }
//                Text("Similar Images")
//                    .font(.headline)
//                ScrollView {
//                    LazyVGrid(
//                        columns: Array(repeating: GridItem(spacing: 0), count: 3),
//                        spacing: 0
//                    ) {
//                        ForEach(self.sortedImageNames, id: \.self) {imageName in
//                            Image(imageName)
//                                .resizable()
//                                .aspectRatio(contentMode: .fill)
//                                .frame(
//                                    width: imageSize,
//                                    height: imageSize
//                                )
//                                .clipped()
//                        }
//                    }
//                    .padding(0)
//                }
                
                .sheet(isPresented: $imagedSelected) {
                    CompareLocalSheetView(sortedImageNames: $sortedImageNames)
                    .presentationDetents([.medium, .large])
                    .presentationContentInteraction(.scrolls)
                    .presentationCompactAdaptation(horizontal: .automatic, vertical: .sheet) // Stay sheet in landschape mode
//                    .presentationDragIndicator(.visible)
                    .presentationCornerRadius(36.0)
                    .presentationBackgroundInteraction(.enabled)
                }

            }
            .toolbar {
                if cacheState == .computing {
                    ProgressView()
                        .progressViewStyle(.circular)
                } else if cacheState == .empty {
                    Button("Fill Cache") {
                        cacheState = .computing
                        fillCache()
                        cacheState = .filled
                    }
                } else {
                    Button("Reset Cache") {
                        cacheState = .computing
                        resetCache()
                        cacheState = .empty
                    }
                }
            }
            .navigationTitle("Visual Search")
        }
    }
}

#Preview {
    CompareLocalView()
}
